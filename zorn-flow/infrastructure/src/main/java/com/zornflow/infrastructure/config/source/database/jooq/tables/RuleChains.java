/*
 * This file is generated by jOOQ.
 */
package com.zornflow.infrastructure.config.source.database.jooq.tables;


import com.zornflow.infrastructure.config.source.database.jooq.Engine;
import com.zornflow.infrastructure.config.source.database.jooq.Keys;
import com.zornflow.infrastructure.config.source.database.jooq.tables.ChainNodes.ChainNodesPath;
import com.zornflow.infrastructure.config.source.database.jooq.tables.ChainRules.ChainRulesPath;
import com.zornflow.infrastructure.config.source.database.jooq.tables.SharedNodes.SharedNodesPath;
import com.zornflow.infrastructure.config.source.database.jooq.tables.records.RuleChainsRecord;

import java.time.OffsetDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RuleChains extends TableImpl<RuleChainsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>engine.rule_chains</code>
     */
    public static final RuleChains RULE_CHAINS = new RuleChains();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RuleChainsRecord> getRecordType() {
        return RuleChainsRecord.class;
    }

    /**
     * The column <code>engine.rule_chains.id</code>.
     */
    public final TableField<RuleChainsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>engine.rule_chains.name</code>.
     */
    public final TableField<RuleChainsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>engine.rule_chains.version</code>.
     */
    public final TableField<RuleChainsRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>engine.rule_chains.description</code>.
     */
    public final TableField<RuleChainsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>engine.rule_chains.created_at</code>.
     */
    public final TableField<RuleChainsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>engine.rule_chains.updated_at</code>.
     */
    public final TableField<RuleChainsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private RuleChains(Name alias, Table<RuleChainsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private RuleChains(Name alias, Table<RuleChainsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>engine.rule_chains</code> table reference
     */
    public RuleChains(String alias) {
        this(DSL.name(alias), RULE_CHAINS);
    }

    /**
     * Create an aliased <code>engine.rule_chains</code> table reference
     */
    public RuleChains(Name alias) {
        this(alias, RULE_CHAINS);
    }

    /**
     * Create a <code>engine.rule_chains</code> table reference
     */
    public RuleChains() {
        this(DSL.name("rule_chains"), null);
    }

    public <O extends Record> RuleChains(Table<O> path, ForeignKey<O, RuleChainsRecord> childPath, InverseForeignKey<O, RuleChainsRecord> parentPath) {
        super(path, childPath, parentPath, RULE_CHAINS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class RuleChainsPath extends RuleChains implements Path<RuleChainsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> RuleChainsPath(Table<O> path, ForeignKey<O, RuleChainsRecord> childPath, InverseForeignKey<O, RuleChainsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private RuleChainsPath(Name alias, Table<RuleChainsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public RuleChainsPath as(String alias) {
            return new RuleChainsPath(DSL.name(alias), this);
        }

        @Override
        public RuleChainsPath as(Name alias) {
            return new RuleChainsPath(alias, this);
        }

        @Override
        public RuleChainsPath as(Table<?> alias) {
            return new RuleChainsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Engine.ENGINE;
    }

    @Override
    public UniqueKey<RuleChainsRecord> getPrimaryKey() {
        return Keys.RULE_CHAINS_PKEY;
    }

    private transient ChainNodesPath _chainNodes;

    /**
     * Get the implicit to-many join path to the <code>engine.chain_nodes</code>
     * table
     */
    public ChainNodesPath chainNodes() {
        if (_chainNodes == null)
            _chainNodes = new ChainNodesPath(this, null, Keys.CHAIN_NODES__CHAIN_NODES_RULE_CHAIN_ID_FKEY.getInverseKey());

        return _chainNodes;
    }

    private transient ChainRulesPath _chainRules;

    /**
     * Get the implicit to-many join path to the <code>engine.chain_rules</code>
     * table
     */
    public ChainRulesPath chainRules() {
        if (_chainRules == null)
            _chainRules = new ChainRulesPath(this, null, Keys.CHAIN_RULES__CHAIN_RULES_RULE_CHAIN_ID_FKEY.getInverseKey());

        return _chainRules;
    }

    private transient SharedNodesPath _sharedNodes;

    /**
     * Get the implicit to-many join path to the
     * <code>engine.shared_nodes</code> table
     */
    public SharedNodesPath sharedNodes() {
        if (_sharedNodes == null)
            _sharedNodes = new SharedNodesPath(this, null, Keys.SHARED_NODES__SHARED_NODES_RULE_CHAIN_ID_FKEY.getInverseKey());

        return _sharedNodes;
    }

    @Override
    public RuleChains as(String alias) {
        return new RuleChains(DSL.name(alias), this);
    }

    @Override
    public RuleChains as(Name alias) {
        return new RuleChains(alias, this);
    }

    @Override
    public RuleChains as(Table<?> alias) {
        return new RuleChains(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RuleChains rename(String name) {
        return new RuleChains(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RuleChains rename(Name name) {
        return new RuleChains(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RuleChains rename(Table<?> name) {
        return new RuleChains(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RuleChains where(Condition condition) {
        return new RuleChains(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RuleChains where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RuleChains where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RuleChains where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RuleChains where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RuleChains where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RuleChains where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public RuleChains where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RuleChains whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public RuleChains whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
