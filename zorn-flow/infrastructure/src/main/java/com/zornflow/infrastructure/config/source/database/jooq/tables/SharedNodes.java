/*
 * This file is generated by jOOQ.
 */
package com.zornflow.infrastructure.config.source.database.jooq.tables;


import com.zornflow.infrastructure.config.source.database.jooq.Engine;
import com.zornflow.infrastructure.config.source.database.jooq.Keys;
import com.zornflow.infrastructure.config.source.database.jooq.tables.ChainNodes.ChainNodesPath;
import com.zornflow.infrastructure.config.source.database.jooq.tables.RuleChains.RuleChainsPath;
import com.zornflow.infrastructure.config.source.database.jooq.tables.records.SharedNodesRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 可复用的共享流程节点模板
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SharedNodes extends TableImpl<SharedNodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>engine.shared_nodes</code>
     */
    public static final SharedNodes SHARED_NODES = new SharedNodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SharedNodesRecord> getRecordType() {
        return SharedNodesRecord.class;
    }

    /**
     * The column <code>engine.shared_nodes.id</code>.
     */
    public final TableField<SharedNodesRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>engine.shared_nodes.name</code>.
     */
    public final TableField<SharedNodesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>engine.shared_nodes.node_type</code>.
     */
    public final TableField<SharedNodesRecord, String> NODE_TYPE = createField(DSL.name("node_type"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>engine.shared_nodes.rule_chain_id</code>.
     */
    public final TableField<SharedNodesRecord, String> RULE_CHAIN_ID = createField(DSL.name("rule_chain_id"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>engine.shared_nodes.conditions</code>.
     */
    public final TableField<SharedNodesRecord, JSONB> CONDITIONS = createField(DSL.name("conditions"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>engine.shared_nodes.properties</code>.
     */
    public final TableField<SharedNodesRecord, JSONB> PROPERTIES = createField(DSL.name("properties"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>engine.shared_nodes.created_at</code>.
     */
    public final TableField<SharedNodesRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>engine.shared_nodes.updated_at</code>.
     */
    public final TableField<SharedNodesRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private SharedNodes(Name alias, Table<SharedNodesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SharedNodes(Name alias, Table<SharedNodesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("可复用的共享流程节点模板"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>engine.shared_nodes</code> table reference
     */
    public SharedNodes(String alias) {
        this(DSL.name(alias), SHARED_NODES);
    }

    /**
     * Create an aliased <code>engine.shared_nodes</code> table reference
     */
    public SharedNodes(Name alias) {
        this(alias, SHARED_NODES);
    }

    /**
     * Create a <code>engine.shared_nodes</code> table reference
     */
    public SharedNodes() {
        this(DSL.name("shared_nodes"), null);
    }

    public <O extends Record> SharedNodes(Table<O> path, ForeignKey<O, SharedNodesRecord> childPath, InverseForeignKey<O, SharedNodesRecord> parentPath) {
        super(path, childPath, parentPath, SHARED_NODES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SharedNodesPath extends SharedNodes implements Path<SharedNodesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> SharedNodesPath(Table<O> path, ForeignKey<O, SharedNodesRecord> childPath, InverseForeignKey<O, SharedNodesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SharedNodesPath(Name alias, Table<SharedNodesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SharedNodesPath as(String alias) {
            return new SharedNodesPath(DSL.name(alias), this);
        }

        @Override
        public SharedNodesPath as(Name alias) {
            return new SharedNodesPath(alias, this);
        }

        @Override
        public SharedNodesPath as(Table<?> alias) {
            return new SharedNodesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Engine.ENGINE;
    }

    @Override
    public UniqueKey<SharedNodesRecord> getPrimaryKey() {
        return Keys.SHARED_NODES_PKEY;
    }

    @Override
    public List<ForeignKey<SharedNodesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SHARED_NODES__SHARED_NODES_RULE_CHAIN_ID_FKEY);
    }

    private transient RuleChainsPath _ruleChains;

    /**
     * Get the implicit join path to the <code>engine.rule_chains</code> table.
     */
    public RuleChainsPath ruleChains() {
        if (_ruleChains == null)
            _ruleChains = new RuleChainsPath(this, Keys.SHARED_NODES__SHARED_NODES_RULE_CHAIN_ID_FKEY, null);

        return _ruleChains;
    }

    private transient ChainNodesPath _chainNodes;

    /**
     * Get the implicit to-many join path to the <code>engine.chain_nodes</code>
     * table
     */
    public ChainNodesPath chainNodes() {
        if (_chainNodes == null)
            _chainNodes = new ChainNodesPath(this, null, Keys.CHAIN_NODES__CHAIN_NODES_SHARED_NODE_ID_FKEY.getInverseKey());

        return _chainNodes;
    }

    @Override
    public SharedNodes as(String alias) {
        return new SharedNodes(DSL.name(alias), this);
    }

    @Override
    public SharedNodes as(Name alias) {
        return new SharedNodes(alias, this);
    }

    @Override
    public SharedNodes as(Table<?> alias) {
        return new SharedNodes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SharedNodes rename(String name) {
        return new SharedNodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SharedNodes rename(Name name) {
        return new SharedNodes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SharedNodes rename(Table<?> name) {
        return new SharedNodes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SharedNodes where(Condition condition) {
        return new SharedNodes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SharedNodes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SharedNodes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SharedNodes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SharedNodes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SharedNodes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SharedNodes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SharedNodes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SharedNodes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SharedNodes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
