/*
 * This file is generated by jOOQ.
 */
package com.zornflow.infrastructure.persistence.jooq.tables;


import com.zornflow.infrastructure.persistence.jooq.Engine;
import com.zornflow.infrastructure.persistence.jooq.Keys;
import com.zornflow.infrastructure.persistence.jooq.tables.ChainNodes.ChainNodesPath;
import com.zornflow.infrastructure.persistence.jooq.tables.ProcessInstances.ProcessInstancesPath;
import com.zornflow.infrastructure.persistence.jooq.tables.records.ProcessChainsRecord;
import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;
import java.util.Collection;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ProcessChains extends TableImpl<ProcessChainsRecord> {

  /**
   * The reference instance of <code>engine.process_chains</code>
   */
  public static final ProcessChains PROCESS_CHAINS = new ProcessChains();
  private static final long serialVersionUID = 1L;
  /**
   * The column <code>engine.process_chains.id</code>.
   */
  public final TableField<ProcessChainsRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(40).nullable(false), this, "");
  /**
   * The column <code>engine.process_chains.name</code>.
   */
  public final TableField<ProcessChainsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");
  /**
   * The column <code>engine.process_chains.description</code>.
   */
  public final TableField<ProcessChainsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");
  /**
   * The column <code>engine.process_chains.record_status</code>.
   */
  public final TableField<ProcessChainsRecord, String> RECORD_STATUS = createField(DSL.name("record_status"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.field(DSL.raw("'ACTIVE'::character varying"), SQLDataType.VARCHAR)), this, "");
  /**
   * The column <code>engine.process_chains.version</code>.
   */
  public final TableField<ProcessChainsRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");
  /**
   * The column <code>engine.process_chains.created_at</code>.
   */
  public final TableField<ProcessChainsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");
  /**
   * The column <code>engine.process_chains.updated_at</code>.
   */
  public final TableField<ProcessChainsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");
  private transient ChainNodesPath _chainNodes;
  private transient ProcessInstancesPath _processInstances;

  private ProcessChains(Name alias, Table<ProcessChainsRecord> aliased) {
    this(alias, aliased, (Field<?>[]) null, null);
  }

  private ProcessChains(Name alias, Table<ProcessChainsRecord> aliased, Field<?>[] parameters, Condition where) {
    super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
  }

  /**
   * Create an aliased <code>engine.process_chains</code> table reference
   */
  public ProcessChains(String alias) {
    this(DSL.name(alias), PROCESS_CHAINS);
  }

  /**
   * Create an aliased <code>engine.process_chains</code> table reference
   */
  public ProcessChains(Name alias) {
    this(alias, PROCESS_CHAINS);
  }

  /**
   * Create a <code>engine.process_chains</code> table reference
   */
  public ProcessChains() {
    this(DSL.name("process_chains"), null);
  }

  public <O extends Record> ProcessChains(Table<O> path, ForeignKey<O, ProcessChainsRecord> childPath, InverseForeignKey<O, ProcessChainsRecord> parentPath) {
    super(path, childPath, parentPath, PROCESS_CHAINS);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ProcessChainsRecord> getRecordType() {
    return ProcessChainsRecord.class;
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Engine.ENGINE;
  }

  @Override
  public UniqueKey<ProcessChainsRecord> getPrimaryKey() {
    return Keys.PROCESS_CHAINS_PKEY;
  }

  /**
   * Get the implicit to-many join path to the <code>engine.chain_nodes</code>
   * table
   */
  public ChainNodesPath chainNodes() {
    if (_chainNodes == null)
      _chainNodes = new ChainNodesPath(this, null, Keys.CHAIN_NODES__CHAIN_NODES_PROCESS_CHAIN_ID_FKEY.getInverseKey());

    return _chainNodes;
  }

  /**
   * Get the implicit to-many join path to the
   * <code>engine.process_instances</code> table
   */
  public ProcessInstancesPath processInstances() {
    if (_processInstances == null)
      _processInstances = new ProcessInstancesPath(this, null, Keys.PROCESS_INSTANCES__PROCESS_INSTANCES_PROCESS_CHAIN_ID_FKEY.getInverseKey());

    return _processInstances;
  }

  @Override
  public ProcessChains as(String alias) {
    return new ProcessChains(DSL.name(alias), this);
  }

  @Override
  public ProcessChains as(Name alias) {
    return new ProcessChains(alias, this);
  }

  @Override
  public ProcessChains as(Table<?> alias) {
    return new ProcessChains(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public ProcessChains rename(String name) {
    return new ProcessChains(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public ProcessChains rename(Name name) {
    return new ProcessChains(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public ProcessChains rename(Table<?> name) {
    return new ProcessChains(name.getQualifiedName(), null);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public ProcessChains where(Condition condition) {
    return new ProcessChains(getQualifiedName(), aliased() ? this : null, null, condition);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public ProcessChains where(Collection<? extends Condition> conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public ProcessChains where(Condition... conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public ProcessChains where(Field<Boolean> condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public ProcessChains where(SQL condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public ProcessChains where(@Stringly.SQL String condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public ProcessChains where(@Stringly.SQL String condition, Object... binds) {
    return where(DSL.condition(condition, binds));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public ProcessChains where(@Stringly.SQL String condition, QueryPart... parts) {
    return where(DSL.condition(condition, parts));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public ProcessChains whereExists(Select<?> select) {
    return where(DSL.exists(select));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public ProcessChains whereNotExists(Select<?> select) {
    return where(DSL.notExists(select));
  }

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  public static class ProcessChainsPath extends ProcessChains implements Path<ProcessChainsRecord> {

    private static final long serialVersionUID = 1L;

    public <O extends Record> ProcessChainsPath(Table<O> path, ForeignKey<O, ProcessChainsRecord> childPath, InverseForeignKey<O, ProcessChainsRecord> parentPath) {
      super(path, childPath, parentPath);
    }

    private ProcessChainsPath(Name alias, Table<ProcessChainsRecord> aliased) {
      super(alias, aliased);
    }

    @Override
    public ProcessChainsPath as(String alias) {
      return new ProcessChainsPath(DSL.name(alias), this);
    }

    @Override
    public ProcessChainsPath as(Name alias) {
      return new ProcessChainsPath(alias, this);
    }

    @Override
    public ProcessChainsPath as(Table<?> alias) {
      return new ProcessChainsPath(alias.getQualifiedName(), this);
    }
  }
}
