/*
 * This file is generated by jOOQ.
 */
package com.zornflow.infrastructure.config.source.database.jooq.tables;


import com.zornflow.infrastructure.config.source.database.jooq.Engine;
import com.zornflow.infrastructure.config.source.database.jooq.Indexes;
import com.zornflow.infrastructure.config.source.database.jooq.Keys;
import com.zornflow.infrastructure.config.source.database.jooq.tables.ProcessChains.ProcessChainsPath;
import com.zornflow.infrastructure.config.source.database.jooq.tables.RuleChains.RuleChainsPath;
import com.zornflow.infrastructure.config.source.database.jooq.tables.SharedNodes.SharedNodesPath;
import com.zornflow.infrastructure.config.source.database.jooq.tables.records.ChainNodesRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 节点在链中的具体实例，存储顺序、与共享模板的链接以及属性覆盖
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ChainNodes extends TableImpl<ChainNodesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>engine.chain_nodes</code>
     */
    public static final ChainNodes CHAIN_NODES = new ChainNodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ChainNodesRecord> getRecordType() {
        return ChainNodesRecord.class;
    }

    /**
     * The column <code>engine.chain_nodes.id</code>.
     */
    public final TableField<ChainNodesRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>engine.chain_nodes.process_chain_id</code>.
     */
    public final TableField<ChainNodesRecord, String> PROCESS_CHAIN_ID = createField(DSL.name("process_chain_id"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>engine.chain_nodes.shared_node_id</code>.
     */
    public final TableField<ChainNodesRecord, String> SHARED_NODE_ID = createField(DSL.name("shared_node_id"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>engine.chain_nodes.sequence</code>.
     */
    public final TableField<ChainNodesRecord, Integer> SEQUENCE = createField(DSL.name("sequence"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>engine.chain_nodes.name</code>.
     */
    public final TableField<ChainNodesRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>engine.chain_nodes.next_node_id</code>.
     */
    public final TableField<ChainNodesRecord, String> NEXT_NODE_ID = createField(DSL.name("next_node_id"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>engine.chain_nodes.node_type</code>.
     */
    public final TableField<ChainNodesRecord, String> NODE_TYPE = createField(DSL.name("node_type"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>engine.chain_nodes.rule_chain_id</code>.
     */
    public final TableField<ChainNodesRecord, String> RULE_CHAIN_ID = createField(DSL.name("rule_chain_id"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>engine.chain_nodes.conditions</code>.
     */
    public final TableField<ChainNodesRecord, JSONB> CONDITIONS = createField(DSL.name("conditions"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>engine.chain_nodes.properties</code>.
     */
    public final TableField<ChainNodesRecord, JSONB> PROPERTIES = createField(DSL.name("properties"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>engine.chain_nodes.created_at</code>.
     */
    public final TableField<ChainNodesRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    /**
     * The column <code>engine.chain_nodes.updated_at</code>.
     */
    public final TableField<ChainNodesRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private ChainNodes(Name alias, Table<ChainNodesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ChainNodes(Name alias, Table<ChainNodesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment("节点在链中的具体实例，存储顺序、与共享模板的链接以及属性覆盖"), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>engine.chain_nodes</code> table reference
     */
    public ChainNodes(String alias) {
        this(DSL.name(alias), CHAIN_NODES);
    }

    /**
     * Create an aliased <code>engine.chain_nodes</code> table reference
     */
    public ChainNodes(Name alias) {
        this(alias, CHAIN_NODES);
    }

    /**
     * Create a <code>engine.chain_nodes</code> table reference
     */
    public ChainNodes() {
        this(DSL.name("chain_nodes"), null);
    }

    public <O extends Record> ChainNodes(Table<O> path, ForeignKey<O, ChainNodesRecord> childPath, InverseForeignKey<O, ChainNodesRecord> parentPath) {
        super(path, childPath, parentPath, CHAIN_NODES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ChainNodesPath extends ChainNodes implements Path<ChainNodesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ChainNodesPath(Table<O> path, ForeignKey<O, ChainNodesRecord> childPath, InverseForeignKey<O, ChainNodesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ChainNodesPath(Name alias, Table<ChainNodesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ChainNodesPath as(String alias) {
            return new ChainNodesPath(DSL.name(alias), this);
        }

        @Override
        public ChainNodesPath as(Name alias) {
            return new ChainNodesPath(alias, this);
        }

        @Override
        public ChainNodesPath as(Table<?> alias) {
            return new ChainNodesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Engine.ENGINE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_CHAIN_NODES_PROCESS_CHAIN_ID, Indexes.IDX_CHAIN_NODES_SHARED_NODE_ID);
    }

    @Override
    public UniqueKey<ChainNodesRecord> getPrimaryKey() {
        return Keys.CHAIN_NODES_PKEY;
    }

    @Override
    public List<UniqueKey<ChainNodesRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CHAIN_NODES_PROCESS_CHAIN_ID_SEQUENCE_KEY);
    }

    @Override
    public List<ForeignKey<ChainNodesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CHAIN_NODES__CHAIN_NODES_PROCESS_CHAIN_ID_FKEY, Keys.CHAIN_NODES__CHAIN_NODES_RULE_CHAIN_ID_FKEY, Keys.CHAIN_NODES__CHAIN_NODES_SHARED_NODE_ID_FKEY);
    }

    private transient ProcessChainsPath _processChains;

    /**
     * Get the implicit join path to the <code>engine.process_chains</code>
     * table.
     */
    public ProcessChainsPath processChains() {
        if (_processChains == null)
            _processChains = new ProcessChainsPath(this, Keys.CHAIN_NODES__CHAIN_NODES_PROCESS_CHAIN_ID_FKEY, null);

        return _processChains;
    }

    private transient RuleChainsPath _ruleChains;

    /**
     * Get the implicit join path to the <code>engine.rule_chains</code> table.
     */
    public RuleChainsPath ruleChains() {
        if (_ruleChains == null)
            _ruleChains = new RuleChainsPath(this, Keys.CHAIN_NODES__CHAIN_NODES_RULE_CHAIN_ID_FKEY, null);

        return _ruleChains;
    }

    private transient SharedNodesPath _sharedNodes;

    /**
     * Get the implicit join path to the <code>engine.shared_nodes</code> table.
     */
    public SharedNodesPath sharedNodes() {
        if (_sharedNodes == null)
            _sharedNodes = new SharedNodesPath(this, Keys.CHAIN_NODES__CHAIN_NODES_SHARED_NODE_ID_FKEY, null);

        return _sharedNodes;
    }

    @Override
    public ChainNodes as(String alias) {
        return new ChainNodes(DSL.name(alias), this);
    }

    @Override
    public ChainNodes as(Name alias) {
        return new ChainNodes(alias, this);
    }

    @Override
    public ChainNodes as(Table<?> alias) {
        return new ChainNodes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChainNodes rename(String name) {
        return new ChainNodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChainNodes rename(Name name) {
        return new ChainNodes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChainNodes rename(Table<?> name) {
        return new ChainNodes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChainNodes where(Condition condition) {
        return new ChainNodes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChainNodes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChainNodes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChainNodes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChainNodes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChainNodes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChainNodes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChainNodes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChainNodes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChainNodes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
