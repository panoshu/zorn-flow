/*
 * This file is generated by jOOQ.
 */
package com.zornflow.infrastructure.persistence.jooq.tables;


import com.zornflow.infrastructure.persistence.jooq.Engine;
import com.zornflow.infrastructure.persistence.jooq.Indexes;
import com.zornflow.infrastructure.persistence.jooq.Keys;
import com.zornflow.infrastructure.persistence.jooq.tables.ChainNodes.ChainNodesPath;
import com.zornflow.infrastructure.persistence.jooq.tables.ProcessChains.ProcessChainsPath;
import com.zornflow.infrastructure.persistence.jooq.tables.records.ProcessInstancesRecord;
import org.jooq.*;
import org.jooq.Record;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;


/**
 * 流程实例
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class ProcessInstances extends TableImpl<ProcessInstancesRecord> {

  /**
   * The reference instance of <code>engine.process_instances</code>
   */
  public static final ProcessInstances PROCESS_INSTANCES = new ProcessInstances();
  private static final long serialVersionUID = 1L;
  /**
   * The column <code>engine.process_instances.id</code>.
   */
  public final TableField<ProcessInstancesRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(40).nullable(false), this, "");
  /**
   * The column <code>engine.process_instances.process_chain_id</code>.
   */
  public final TableField<ProcessInstancesRecord, String> PROCESS_CHAIN_ID = createField(DSL.name("process_chain_id"), SQLDataType.VARCHAR(40).nullable(false), this, "");
  /**
   * The column <code>engine.process_instances.status</code>.
   */
  public final TableField<ProcessInstancesRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false), this, "");
  /**
   * The column <code>engine.process_instances.current_node_id</code>.
   */
  public final TableField<ProcessInstancesRecord, String> CURRENT_NODE_ID = createField(DSL.name("current_node_id"), SQLDataType.VARCHAR(40), this, "");
  /**
   * The column <code>engine.process_instances.context</code>.
   */
  public final TableField<ProcessInstancesRecord, JSONB> CONTEXT = createField(DSL.name("context"), SQLDataType.JSONB, this, "");
  /**
   * The column <code>engine.process_instances.version</code>.
   */
  public final TableField<ProcessInstancesRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER, this, "");
  /**
   * The column <code>engine.process_instances.created_at</code>.
   */
  public final TableField<ProcessInstancesRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");
  /**
   * The column <code>engine.process_instances.updated_at</code>.
   */
  public final TableField<ProcessInstancesRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");
  private transient ChainNodesPath _chainNodes;
  private transient ProcessChainsPath _processChains;

  private ProcessInstances(Name alias, Table<ProcessInstancesRecord> aliased) {
    this(alias, aliased, (Field<?>[]) null, null);
  }

  private ProcessInstances(Name alias, Table<ProcessInstancesRecord> aliased, Field<?>[] parameters, Condition where) {
    super(alias, null, aliased, parameters, DSL.comment("流程实例"), TableOptions.table(), where);
  }

  /**
   * Create an aliased <code>engine.process_instances</code> table reference
   */
  public ProcessInstances(String alias) {
    this(DSL.name(alias), PROCESS_INSTANCES);
  }

  /**
   * Create an aliased <code>engine.process_instances</code> table reference
   */
  public ProcessInstances(Name alias) {
    this(alias, PROCESS_INSTANCES);
  }

  /**
   * Create a <code>engine.process_instances</code> table reference
   */
  public ProcessInstances() {
    this(DSL.name("process_instances"), null);
  }

  public <O extends Record> ProcessInstances(Table<O> path, ForeignKey<O, ProcessInstancesRecord> childPath, InverseForeignKey<O, ProcessInstancesRecord> parentPath) {
    super(path, childPath, parentPath, PROCESS_INSTANCES);
  }

  /**
   * The class holding records for this type
   */
  @Override
  public Class<ProcessInstancesRecord> getRecordType() {
    return ProcessInstancesRecord.class;
  }

  @Override
  public Schema getSchema() {
    return aliased() ? null : Engine.ENGINE;
  }

  @Override
  public List<Index> getIndexes() {
    return Arrays.asList(Indexes.IDX_PROCESS_INSTANCES_PROCESS_CHAIN_ID, Indexes.IDX_PROCESS_INSTANCES_STATUS);
  }

  @Override
  public UniqueKey<ProcessInstancesRecord> getPrimaryKey() {
    return Keys.PROCESS_INSTANCES_PKEY;
  }

  @Override
  public List<ForeignKey<ProcessInstancesRecord, ?>> getReferences() {
    return Arrays.asList(Keys.PROCESS_INSTANCES__PROCESS_INSTANCES_CURRENT_NODE_ID_FKEY, Keys.PROCESS_INSTANCES__PROCESS_INSTANCES_PROCESS_CHAIN_ID_FKEY);
  }

  /**
   * Get the implicit join path to the <code>engine.chain_nodes</code> table.
   */
  public ChainNodesPath chainNodes() {
    if (_chainNodes == null)
      _chainNodes = new ChainNodesPath(this, Keys.PROCESS_INSTANCES__PROCESS_INSTANCES_CURRENT_NODE_ID_FKEY, null);

    return _chainNodes;
  }

  /**
   * Get the implicit join path to the <code>engine.process_chains</code>
   * table.
   */
  public ProcessChainsPath processChains() {
    if (_processChains == null)
      _processChains = new ProcessChainsPath(this, Keys.PROCESS_INSTANCES__PROCESS_INSTANCES_PROCESS_CHAIN_ID_FKEY, null);

    return _processChains;
  }

  @Override
  public ProcessInstances as(String alias) {
    return new ProcessInstances(DSL.name(alias), this);
  }

  @Override
  public ProcessInstances as(Name alias) {
    return new ProcessInstances(alias, this);
  }

  @Override
  public ProcessInstances as(Table<?> alias) {
    return new ProcessInstances(alias.getQualifiedName(), this);
  }

  /**
   * Rename this table
   */
  @Override
  public ProcessInstances rename(String name) {
    return new ProcessInstances(DSL.name(name), null);
  }

  /**
   * Rename this table
   */
  @Override
  public ProcessInstances rename(Name name) {
    return new ProcessInstances(name, null);
  }

  /**
   * Rename this table
   */
  @Override
  public ProcessInstances rename(Table<?> name) {
    return new ProcessInstances(name.getQualifiedName(), null);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public ProcessInstances where(Condition condition) {
    return new ProcessInstances(getQualifiedName(), aliased() ? this : null, null, condition);
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public ProcessInstances where(Collection<? extends Condition> conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public ProcessInstances where(Condition... conditions) {
    return where(DSL.and(conditions));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public ProcessInstances where(Field<Boolean> condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public ProcessInstances where(SQL condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public ProcessInstances where(@Stringly.SQL String condition) {
    return where(DSL.condition(condition));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public ProcessInstances where(@Stringly.SQL String condition, Object... binds) {
    return where(DSL.condition(condition, binds));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  @PlainSQL
  public ProcessInstances where(@Stringly.SQL String condition, QueryPart... parts) {
    return where(DSL.condition(condition, parts));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public ProcessInstances whereExists(Select<?> select) {
    return where(DSL.exists(select));
  }

  /**
   * Create an inline derived table from this table
   */
  @Override
  public ProcessInstances whereNotExists(Select<?> select) {
    return where(DSL.notExists(select));
  }

  /**
   * A subtype implementing {@link Path} for simplified path-based joins.
   */
  public static class ProcessInstancesPath extends ProcessInstances implements Path<ProcessInstancesRecord> {

    private static final long serialVersionUID = 1L;

    public <O extends Record> ProcessInstancesPath(Table<O> path, ForeignKey<O, ProcessInstancesRecord> childPath, InverseForeignKey<O, ProcessInstancesRecord> parentPath) {
      super(path, childPath, parentPath);
    }

    private ProcessInstancesPath(Name alias, Table<ProcessInstancesRecord> aliased) {
      super(alias, aliased);
    }

    @Override
    public ProcessInstancesPath as(String alias) {
      return new ProcessInstancesPath(DSL.name(alias), this);
    }

    @Override
    public ProcessInstancesPath as(Name alias) {
      return new ProcessInstancesPath(alias, this);
    }

    @Override
    public ProcessInstancesPath as(Table<?> alias) {
      return new ProcessInstancesPath(alias.getQualifiedName(), this);
    }
  }
}
