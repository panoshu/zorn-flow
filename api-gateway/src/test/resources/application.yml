# /src/main/resources/application.yml

spring:
  application:
    name: secure-api-gateway
  # 为防重放提供专用的、高性能的Redis配置
  data:
    redis:
      host: localhost
      port: 6379
  # Spring Cache 仍可用于其他场景，如密钥缓存
  cache:
    type: caffeine
    cache-names:
      - secretKeys # 明确定义缓存名称
    caffeine:
      spec: expireAfterWrite=10m # 密钥缓存时间可以长一些

  # 新增：Spring Cloud Vault 配置
  cloud:
    vault:
      enable: false
      uri: http://127.0.0.1:8200 # Vault 服务器地址
      token: "s.xxxxxxxxxxxxxxxxxxxx" # Root Token
      fail-fast: true # 启动时如果无法连接 Vault 则快速失败
      transit:
        # 用于加密/解密的 Transit Engine 路径
        backend: transit
        # 我们在 Vault 中创建的密钥的名称
        key: api-gateway-key

security:
  global:
    # 全局开关
    enabled: true
    # 白名单路径，支持 Ant-style 匹配
    exclude-paths:
      - /actuator/**
      - /v1/public/**

  # 加密模块配置
  crypto:
    enabled: true
    max-body-size: 10MB # 1. 限制为10MB
    on-encrypt-failure: FAIL # 7. 响应加密失败策略 (可选: PASS_THROUGH)
    secret-key-cache-name: "gatewaySecretKeys"
    exclude-paths: # 加密模块的独立排除路径
      - /api/v1/files/download/** # 例如：文件下载接口不加密
      - /api/v1/public/**
      - /api*
    # 策略选择：通过Bean名称指定
    algorithm-strategy: AES # SM4
    # 针对 AES 策略的特定配置
    aes-gcm-engine:
      tag-length-bits: 128 # GCM 认证标签长度（位）
      iv-length-bytes: 12  # IV 长度（字节）
    # 新增：针对 SM4 策略的特定配置
    sm4-gcm-engine:
      tag-length-bits: 128
      iv-length-bytes: 12

    key-source-strategy: CONFIG_FILE # REMOTE_SERVICE, VAULT
    # 提供给密钥源的标识符，例如用于远程服务调用
    key-id: "default-key"
    # 'CONFIG_FILE' 策略的特定配置
    config-file:
      # 强烈建议在生产环境中使用环境变量或Vault等安全方式注入
      # SM4 的密钥长度也是128位(16字节)，Base64编码后是24个字符。
      # 为了演示，我们使用一个新的 key。
      # 老密钥 v1，已不再是主密钥
      - version: "v1"
        secret: ${GATEWAY_AES_KEY_V1:dGhpc2lzYWVzMjU2Yml0c2VjcmV0a2V5MTIzNA==}
        primary: false
      # 新密钥 v2，当前活动的主密钥
      - version: "v2"
        secret: ${GATEWAY_AES_KEY_V2:dGhpc2lzYW5vdGhlcnNlY3JldGtleWFiY2RlZg==}
        primary: true
    # 'remoteServiceKeySource' 策略的特定配置
    remote-service:
      url: http://key-service/v1/keys/{keyId}

  # 防重放模块配置
  replay:
    enabled: true
    # 策略选择：推荐在分布式环境中使用 redis
    strategy: "redis"
    # 请求时间窗口
    ttl: 60s
    nonce-key-prefix: "gateway:nonce:"
    exclude-paths: # 防重放模块的独立排除路径
      - /api/v1/public/status # 例如：状态检查接口不防重放
      - /actuator/**

  # 日志模块（为简洁起见，本次重构中未实现，但保留配置结构）
  log:
    enabled: true
    publisher: file
    include-payload: true
    exclude-paths: # 日志模块的独立排除路径
      - /actuator/health/liveness
      - /actuator/health/readiness

logging:
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{36} - %msg%n"
  # 如果想让FileLogPublisher输出到特定文件并使用JSON格式
  file:
    name: logs/gateway.log
  logback:
    rollingpolicy:
      file-name-pattern: "logs/gateway-%d{yyyy-MM-dd}.%i.log"
      max-file-size: 10MB
